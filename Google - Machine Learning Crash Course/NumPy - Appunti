{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NumPy - Appunti","private_outputs":true,"provenance":[{"file_id":"https://github.com/google/eng-edu/blob/main/ml/cc/exercises/numpy_ultraquick_tutorial.ipynb","timestamp":1630919167593}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"T4r2z30vJSbA"},"source":["# NumPy appunti\n","## Cosa è NumPy?\n","NumPy è una libreria di Python per creare e manipolare vettori e matrici. NumPy fornisce cose come:\n","\n","*   Un Array multidimensionale.\n","*   Un insieme di routine per velocizzare le operazioni sugli Array. Queste routine sono veloci perchè si basano su del codice pre-compilato in C. Di conseguenza le operazioni avvengono quasi alla velocità del C, ma preservando la semplicità sintattica di Python.\n","\n","Alla base del package NumPy c'è l'oggetto *ndarray*. Questo è un array *n*-dimensionale contenenti tipi di dato omogenei. Ci sono diverse differenze importanti tra gli array di NumPy e le sequenze standard in Python:\n","\n","*   **Dimensione** - Gli array NumPy hanno una dimensione fissa alla creazione, a differenza delle liste in Python (che possono crescere dinamicamente). Cambiare la size di un *ndarray* creerà un nuovo array e cancellerà l'originale.\n","*   **Dati omogenei** - Gli elementi in un NumPy array è necessario che siano tutti dello stesso tipo, in modo da avere la stessa dimensione in memoria. L'unica eccezione: E' possibile avere un array di oggetti, e quindi permettere agli array di contenere elementi di dimensioni differenti.\n","* **Routines** -  Gli array di NumPy facilitano operazioni matematiche avanzate ed altri tipi di operazione su grandi quantità di dati. Tipicamente, tali operazioni sono eseguite molto più efficientemente e con meno codice di quanto sarebbe possibile senza NumPy.\n","* **Cooperazione** - Oggigiorno per usare la maggior parte delle librerie è richiesta la conversione delle sequenze di Python in NumPy, quindi la sola conoscenza delle sequenze di Python non è più sufficiente.\n","\n","## Vettorizzazione e broadcasting\n","\n","L'efficienza di NumPy si basa sul concetto di Vettorizzazione e Broadcasting. \n","\n","### Vettorizzazione\n","La vettorizzazione descrive **l'assenza esplicita di cicli**, indicizzazione, etc., nel codice - queste cose hanno luogo \"dietro le quinte\" grazie a del codice ottimizzato pre-compilato in C. Il codice vettorizzato ha diversi vantaggi:\n","\n","* Il codice vettorizzato è più conciso e facile da leggere.\n","* Poche righe di codice significa meno probabilità di bug.\n","* Il codice ricorda più da vicino la notazione matematica, il che rende più. facile costruire dei costrutti matematici.\n","\n","### Broadcasting\n","Grazie al broadcasting è possibile effettuare delle operazioni per esempio tra due array anche se non sono della stessa forma. Se consideriamo per esempio un operazione che coinvolge due array, di cui uno più piccolo, quello più piccolo viene \"espanso\" in modo da rendere l'operazione fattibile in modo non ambiguo. Questa operazione si chiama **broadcasting**.\n","\n","Per ulteriori informazioni consultare la documentazione di NumPy:\n","\n","https://numpy.org/doc/stable/user/whatisnumpy.html"]},{"cell_type":"markdown","metadata":{"id":"Ll9RWewwFwX6"},"source":["## Import del modulo NumPy\n","\n","Esegui la cella di codice seguente per importare il modulo NumPy"]},{"cell_type":"code","metadata":{"id":"guvPzSWYJGZ4"},"source":["import numpy as np "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7cT9fXS_JUpa"},"source":["\n","## Popolare gli array con dei numeri specifici\n","\n","\n","\n","\n","\n","\n","\n","Chiama `np.array` per creare una matrice NumPy con i valori da te scelti. Per esempio, la seguente chiamata a `np.array` crea un vettore con 8 elementi:"]},{"cell_type":"code","metadata":{"id":"XxJR5xKpJbB3"},"source":["one_dimensional_array = np.array([1.2, 2.4, 3.5, 4.7, 6.1, 7.2, 8.3, 9.5])\n","print(one_dimensional_array)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RKywqhLTbR1M"},"source":["Puoi anche usare `np.array` per creare una matrice 2D. Per creare una matrice bidimensionale, specifica un livello extra di parentesi quadre. Per esempio, la seguente call crea una matrice 3x2. Ogni gruppo di parentesi è una **riga**. La quantità di elementi per ogni gruppo di parentesi determina le **colonne**:"]},{"cell_type":"code","metadata":{"id":"_veGj18eMCDu"},"source":["two_dimensional_array = np.array([[6, 5], [11, 7], [4, 8]])\n","print(two_dimensional_array)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IJEZ27aLZkBX"},"source":["Il **rank** di un array è il suo numero di dimensioni. La **shape** di un array è una tupla di interi che ci da la lunghezza dell'array lungo ogni **asse**. Nell'esempio sopra:\n","* rank = 2\n","* shape = (3,2), ovvero 3 righe e 2 colonne.\n","\n","In questo array abbiamo due assi, uno di lunghezza 3 e l'altro asse di lunghezza 2."]},{"cell_type":"markdown","metadata":{"id":"E4Dc3ZL0hw5J"},"source":["## Conoscere la shape, size e dimensione di un array\n","\n","Per sapere il numero di assi usiamo `ndarray.ndim` il quale ci dice il numero di assi, chiamata anche dimensione, dell'array:"]},{"cell_type":"code","metadata":{"id":"5ycPCKcoiJfB"},"source":["print(two_dimensional_array.ndim)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cgq-jhCcixsx"},"source":["Per conoscere la shape di un array usiamo `ndarray.shape`. Questo ci mostrerà una tupla di interi che indica il numero degli elementi immagazinati lungo ogni dimensione dell'array. Se, per esempio, abbiamo un array 2D con 3 righe e 2 colonne, la shape dell'array sarà `3,2`:"]},{"cell_type":"code","metadata":{"id":"I8-8Mt7EjI5C"},"source":["print(two_dimensional_array.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o4PtX2ziiYKY"},"source":["Per conoscere la size dell'array usiamo `ndarray.size`. Questo mi dirà il numero degli elementi presente nell'array. Esso corrisponde al prodotto degli interi nella shape dell'array:"]},{"cell_type":"code","metadata":{"id":"VOXbxrKMin5x"},"source":["print(two_dimensional_array.size)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ff4MVuZOjtPB"},"source":["## Reshaping dell'array\n","\n","Usando `arr.reshape()` darà una nuova shape ad un array, senza cambiarne i dati. L'unica accortezza è che quando usiamo il metodo reshape, l'array che vogliamo produrre deve avere lo stesso numero di elementi come l'array originale. Se iniziamo con un array di 6 elementi, ci dobbiamo assicurare che il nuovo array ha in totale 6 elementi. Esempio:"]},{"cell_type":"code","metadata":{"id":"LkpSk8gHkMa7"},"source":["a = np.arange(6)\n","print(a)\n","\n","#uso reshape() per convertire questo vettore in una matrice 3x2\n","b = a.reshape(3,2) #se avessi scritto (3,3) l'array b voleva 9 elementi, ma ne ho solo 6\n","print(b)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IPixVX-7ae-H"},"source":["##Accedere ad une elemento\n","Per accedere ad un elemento basta usare le parentesi quadre. L'indice del primo elemento è 0:"]},{"cell_type":"code","metadata":{"id":"3WHRQvFdavMW"},"source":["print(one_dimensional_array[0])\n","\n","## Per mostrare un elemento di una matrice invece:\n","print(two_dimensional_array[0][0])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0ED7eug9CvGR"},"source":["Per popolare una matrice con tutti zero, chiama `np.zeros`. Per popolare una matrice con tutti uno, chiama `np.ones`."]},{"cell_type":"markdown","metadata":{"id":"gEy_pdBoROu3"},"source":["## Popolare gli array con sequenze di numeri\n","Puoi popolare un array con una sequenza di numeri:"]},{"cell_type":"code","metadata":{"id":"CjHfYWhdQYtO"},"source":["sequence_of_integers = np.arange(5, 12)\n","print(sequence_of_integers)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1x3OoWrPWn8S"},"source":[" \n","\n","Nota che `np.arange` genera una sequenza che include il lower bound ed esclude l'upper bound.\n"]},{"cell_type":"markdown","metadata":{"id":"jBBwsgiKdO3I"},"source":["E' possibile anche creare una sequenza di interi spaziati da un certo intervallo l'uno dall'altro. Per sempio, creiamo un array contenente soli numeri dispari tra 1 e 100:"]},{"cell_type":"code","metadata":{"id":"CD18iyQRddgu"},"source":["Only_Odd_numbers=np.arange(1,101,2)\n","print(Only_Odd_numbers)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aiqqxDBINAOY"},"source":["## Popolare un array con dei numeri casuali\n","\n","\n","NumPy fornisce varie funzioni per popolare le matrici con numeri casuali presi in un certo intervallo. Per esempio, `np.random.randint` genera degli interi casuali compresi tra un minimo ed un massimo. La seguente chiamata popola un vettore contenente 6 elementi con degli interi casuali compresi tra 50 e 100.\n","\n"]},{"cell_type":"code","metadata":{"id":"tG8ao9CsNqw8"},"source":["random_integers_between_50_and_100 = np.random.randint(low=50, high=101, size=(16))\n","print(random_integers_between_50_and_100)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BSU7lMUcgRm3"},"source":["Nota che come per `np.arange`, anche `np.random.randint` considera come valore massimo 'high'-1.\n"]},{"cell_type":"markdown","metadata":{"id":"lQF6-Eg0ksqE"},"source":["Per creare dei valori con la virgola a caso compresi tra 0.0 e 1.0, chiama `np.random.random`. Per esempio:"]},{"cell_type":"code","metadata":{"id":"6Ny0eXZPk5Ax"},"source":["random_floats_between_0_and_1 = np.random.random([6])\n","print(random_floats_between_0_and_1) "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eXOdSjRlSEf6"},"source":["## Operazioni matematiche con gli operatori di NumPy\n","Se vuoi addizionare o sottrarre due vettori o due matrici, l'algebra lineare richiede che i due operandi hanno la stessa dimensione. Inoltre, se vogliamo moltiplicare due vettori o due matrici, l'algebra lineare impone delle regole sulla compatibilità in termini di dimensione degli operandi. Fortunatamente, NumPy usa un trick chiamato **broadcasting** per espandere virtualmente l'operando di dimensione più piccola, ad una dimensione compatibile per far avvenire l'operazione. Per esempio, l'operazione seguente usa il broadcasting per addizionare 2.0 al valore di ogni item nel vettore creato poc'anzi:"]},{"cell_type":"code","metadata":{"id":"J5E5S0wjRvQr"},"source":["random_floats_between_2_and_3 = random_floats_between_0_and_1 + 2.0\n","print(random_floats_between_2_and_3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x6K_poVDPpAg"},"source":["L'operazione seguente fa affidamento al broadcasting per moltiplicare ogni cella del vettore per 3:"]},{"cell_type":"code","metadata":{"id":"tYjvXmvFPoPB"},"source":["random_integers_between_150_and_300 = random_integers_between_50_and_100 * 3\n","print(random_integers_between_150_and_300)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HRBtdao4edyg"},"source":["##Ordinare, aggiungere e rimuovere gli elementi\n","Per ordinare un vettore basta chiamare `np.sort()`:"]},{"cell_type":"code","metadata":{"id":"iHG-kfKkfCAQ"},"source":["print(np.sort(random_integers_between_150_and_300))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KNhEtuIIfpSB"},"source":["Per concatenare due array `np.concatenate():`"]},{"cell_type":"code","metadata":{"id":"-fuX4frNfxAw"},"source":["print(np.concatenate((random_integers_between_50_and_100,random_integers_between_150_and_300)))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"W-qqGD39gL26"},"source":["Per concatenare due matrici invece bisogna specificare l'asse l'asse 0. `np.concatenate((x,y), axis=0)`. La concatenazione in questo modo avviene per righe. Esempio:\n","\n","  * **[** [1,2] [3,4] **]**\n","  * **[** [5,6] **]**\n","\n","  Diventa\n","  * **[** [1,2]\n","  * [3,4]\n","  * [5,6] **]**\n","\n","  Per rimuovere degli elementi in un array invece, è più semplice usare l'indicizzazione per selezionare i soli elementi che vogliamo mantenere."]},{"cell_type":"markdown","metadata":{"id":"ZRr-WVCvmTQr"},"source":["## Indexing e partizionamento\n","\n","Possiamo indicizzare e partizionare gli array NumPy nello stesso modo come facciamo con le liste in Python:"]},{"cell_type":"code","metadata":{"id":"Ykqod43zmdjM"},"source":["data = np.array([1,2,3])\n","\n","print(\"secondo elemento\")\n","print(data[1])\n","\n","print(\"secondo e terzo elemento\")\n","print(data[1:])\n","\n","print(\"Usando gli indici negativi, si calcola 'indice mod size'\")\n","print(data[-2]) # -2 mod 3 = 1, l'elemento data[1] = 2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B2Lx5NU0oK_T"},"source":["Per selezionare soltanto determinati elementi che soddisfano una condizione:"]},{"cell_type":"code","metadata":{"id":"FqDvHVKBoR2j"},"source":["a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n","print(a)\n","print(\"\")\n","\n","#condizione semplice\n","print(\"elementi <4\")\n","print(a[a<4])\n","\n","#condizione composta\n","print(\"\")\n","print(\"elementi <8 e divisibili per 2\")\n","print(a[(a<8) & (a%2==0)])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ofxaokObq5vN"},"source":["## Operazioni elementari con gli array\n","\n","Supponendo `arr1` e `arr2` due vettori, possiamo effettuare le seguenti operazioni in questo modo:\n","* **addizione** - `arr1 + arr2`. Questo somma due vettori.\n","** Se abbiamo un vettore 1-D possiamo sommare tutti i suoi elementi con `a.sum()`. \n","** Se abbiamo un vettore 2-D bisogna specificare invece l'asse sul quale vogliamo fare la somma. Per le righe usiamo **axis=0**, per le colonne **axis = 1** , `a.sum(axis=0)`e `a.sum(axis=1)`"]}]}